// Code generated by MockGen. DO NOT EDIT.
// Source: ./internal/users/businesslogic.go
//
// Generated by this command:
//
//	mockgen -source=./internal/users/businesslogic.go -destination=mocks/businesslogic_mock.go -package=mocks
//

// Package mocks is a generated GoMock package.
package mocks

import (
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
)

// MockIBusinessLogic is a mock of IBusinessLogic interface.
type MockIBusinessLogic struct {
	ctrl     *gomock.Controller
	recorder *MockIBusinessLogicMockRecorder
	isgomock struct{}
}

// MockIBusinessLogicMockRecorder is the mock recorder for MockIBusinessLogic.
type MockIBusinessLogicMockRecorder struct {
	mock *MockIBusinessLogic
}

// NewMockIBusinessLogic creates a new mock instance.
func NewMockIBusinessLogic(ctrl *gomock.Controller) *MockIBusinessLogic {
	mock := &MockIBusinessLogic{ctrl: ctrl}
	mock.recorder = &MockIBusinessLogicMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockIBusinessLogic) EXPECT() *MockIBusinessLogicMockRecorder {
	return m.recorder
}

// GetUser mocks base method.
func (m *MockIBusinessLogic) GetUser() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUser")
	ret0, _ := ret[0].(string)
	return ret0
}

// GetUser indicates an expected call of GetUser.
func (mr *MockIBusinessLogicMockRecorder) GetUser() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUser", reflect.TypeOf((*MockIBusinessLogic)(nil).GetUser))
}
